[
    {
        "id": "2c1113efbd45dee5",
        "type": "tab",
        "label": "Collect data",
        "disabled": false,
        "info": "This flow is responsible for listening on serial port for incoming sensor data, downscaling and saving value to database.\n\nData are validated on input. If there is an error, it is saved to noDataLog.txt\n After validation data are downscaled using median function and save to MeteoData collection.",
        "env": []
    },
    {
        "id": "6f7801d8d187f0ed",
        "type": "serial in",
        "z": "2c1113efbd45dee5",
        "name": "serialIn",
        "serial": "0ec898aff92b268b",
        "x": 70,
        "y": 80,
        "wires": [
            [
                "6219d9bd27ebcd76"
            ]
        ],
        "info": "reads data from arduino in json\n{\"temperature\":25.6,\"humidity\":40}"
    },
    {
        "id": "58ef3fc6d86bd9bd",
        "type": "debug",
        "z": "2c1113efbd45dee5",
        "name": "NoSensorData",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "payload",
        "targetType": "msg",
        "statusVal": "",
        "statusType": "auto",
        "x": 1140,
        "y": 160,
        "wires": []
    },
    {
        "id": "9e8f517b402da712",
        "type": "debug",
        "z": "2c1113efbd45dee5",
        "name": "",
        "active": false,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 570,
        "y": 260,
        "wires": []
    },
    {
        "id": "6219d9bd27ebcd76",
        "type": "json",
        "z": "2c1113efbd45dee5",
        "name": "parseFromJson",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 240,
        "y": 80,
        "wires": [
            [
                "43df30bca74f4e99"
            ]
        ]
    },
    {
        "id": "8c3f05e0eef00f25",
        "type": "change",
        "z": "2c1113efbd45dee5",
        "name": "setTimestamp",
        "rules": [
            {
                "t": "set",
                "p": "payload.timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            },
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 360,
        "y": 160,
        "wires": [
            [
                "2b867d5389fe9d96"
            ]
        ]
    },
    {
        "id": "43df30bca74f4e99",
        "type": "function",
        "z": "2c1113efbd45dee5",
        "name": "validateDataInput",
        "func": "if(!msg.payload.temperature || !msg.payload.humidity){\n    return [msg,null];\n    \n}\n\nreturn [null, msg]\n\n",
        "outputs": 2,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 150,
        "y": 220,
        "wires": [
            [
                "8c3f05e0eef00f25"
            ],
            [
                "114deb1fb586ff36"
            ]
        ]
    },
    {
        "id": "ae74fd62477ea978",
        "type": "file",
        "z": "2c1113efbd45dee5",
        "name": "noDataLog.txt",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 940,
        "y": 160,
        "wires": [
            [
                "58ef3fc6d86bd9bd"
            ]
        ]
    },
    {
        "id": "2b867d5389fe9d96",
        "type": "json",
        "z": "2c1113efbd45dee5",
        "name": "parseToJson",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 530,
        "y": 160,
        "wires": [
            [
                "e5e9dee30225a2f2"
            ]
        ]
    },
    {
        "id": "114deb1fb586ff36",
        "type": "function",
        "z": "2c1113efbd45dee5",
        "name": "setBuffer",
        "func": "let weatherDataFlow = flow.get(\"weatherDataFlow\") || [];\n\n\n\nweatherDataFlow.push(msg.payload)\n\n flow.set(\"weatherDataFlow\", weatherDataFlow)\n\n    msg.payload = weatherDataFlow\n   return msg; \n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 360,
        "y": 260,
        "wires": [
            [
                "9e8f517b402da712"
            ]
        ]
    },
    {
        "id": "c06f04b1bb57a0a6",
        "type": "inject",
        "z": "2c1113efbd45dee5",
        "name": "loadWeatherDataBuffer",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "collection",
                "v": "WeatherData",
                "vt": "str"
            },
            {
                "p": "timestamp",
                "v": "",
                "vt": "date"
            }
        ],
        "repeat": "${INJECT_INTERVAL}",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "weatherDataFlow",
        "payloadType": "flow",
        "x": 150,
        "y": 400,
        "wires": [
            [
                "114f3377d3c3d093"
            ]
        ]
    },
    {
        "id": "9fb43535bb6f522e",
        "type": "change",
        "z": "2c1113efbd45dee5",
        "name": "deletePreviousBuffer",
        "rules": [
            {
                "t": "delete",
                "p": "weatherDataFlow",
                "pt": "flow"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 580,
        "y": 400,
        "wires": [
            [
                "c89f9281dd926a86"
            ]
        ]
    },
    {
        "id": "5036f57c65f942a7",
        "type": "mongodb out",
        "z": "2c1113efbd45dee5",
        "mongodb": "ecb43e63847ff54b",
        "name": "saveToCollection",
        "collection": "",
        "payonly": true,
        "upsert": false,
        "multi": false,
        "operation": "store",
        "x": 1270,
        "y": 400,
        "wires": []
    },
    {
        "id": "c399719e86f47012",
        "type": "function",
        "z": "2c1113efbd45dee5",
        "name": "median",
        "func": "let medianData = {}\nconst keys = Object.keys(msg.payload[0])\n    keys.forEach((key)=>{\n\nlet sorted = msg.payload.slice().sort((a,b)=> (a[key] > b[key]) ? 1 :((b[key] > a[key]  ) ? -1 : 0))\n \n let middle = Math.floor(msg.payload.length / 2)\n  \n   let median = sorted[middle][key]\n   \n   \n   \n   if (msg.payload.length % 2 === 0){\n        median  = (sorted[middle - 1][key] + sorted[middle][key] )/ 2\n      \n    }\n\nmedianData = {\n    ...medianData,\n    [key]: median,\n}\n    })\n    \n    msg.payload = {...medianData}\n\n\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 900,
        "y": 400,
        "wires": [
            [
                "185f147f817d286b"
            ]
        ]
    },
    {
        "id": "185f147f817d286b",
        "type": "change",
        "z": "2c1113efbd45dee5",
        "name": "setDataProperties",
        "rules": [
            {
                "t": "set",
                "p": "payload.sent",
                "pt": "msg",
                "to": "false",
                "tot": "bool"
            },
            {
                "t": "set",
                "p": "payload.timestamp",
                "pt": "msg",
                "to": "timestamp",
                "tot": "msg"
            },
            {
                "t": "delete",
                "p": "timestamp",
                "pt": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 1070,
        "y": 400,
        "wires": [
            [
                "5036f57c65f942a7"
            ]
        ]
    },
    {
        "id": "114f3377d3c3d093",
        "type": "switch",
        "z": "2c1113efbd45dee5",
        "name": "validateNotEmpty",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 370,
        "y": 400,
        "wires": [
            [
                "9fb43535bb6f522e"
            ]
        ]
    },
    {
        "id": "e5e9dee30225a2f2",
        "type": "function",
        "z": "2c1113efbd45dee5",
        "name": "configFilePath",
        "func": "const DOCS_PATH = env.get(\"DOCS_PATH\")\nconst filename = \"noSensorDataLog.txt\"\nmsg.filename = DOCS_PATH + filename\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 720,
        "y": 160,
        "wires": [
            [
                "ae74fd62477ea978"
            ]
        ]
    },
    {
        "id": "c89f9281dd926a86",
        "type": "function",
        "z": "2c1113efbd45dee5",
        "name": "isToken",
        "func": "const token = global.get(\"token\")\nif(!token) return\nreturn msg\n\n",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 760,
        "y": 400,
        "wires": [
            [
                "c399719e86f47012"
            ]
        ]
    },
    {
        "id": "4c9c0eebf8ef4757",
        "type": "file",
        "z": "2c1113efbd45dee5",
        "name": "CollectDataErrorLog.txt",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 550,
        "y": 540,
        "wires": [
            []
        ]
    },
    {
        "id": "76c7442d757845a1",
        "type": "function",
        "z": "2c1113efbd45dee5",
        "name": "configFilePath",
        "func": "const DOCS_PATH = env.get(\"DOCS_PATH\")\nconst filename = \"CollectDataErrorLog.txt\"\nmsg.filename = DOCS_PATH + filename\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 340,
        "y": 540,
        "wires": [
            [
                "4c9c0eebf8ef4757"
            ]
        ]
    },
    {
        "id": "47520030d34699ac",
        "type": "catch",
        "z": "2c1113efbd45dee5",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 80,
        "y": 500,
        "wires": [
            [
                "62d8cfc0785d1b29",
                "76c7442d757845a1"
            ]
        ]
    },
    {
        "id": "62d8cfc0785d1b29",
        "type": "debug",
        "z": "2c1113efbd45dee5",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 310,
        "y": 500,
        "wires": []
    },
    {
        "id": "0ec898aff92b268b",
        "type": "serial-port",
        "serialport": "/dev/ttyUSB0",
        "serialbaud": "9600",
        "databits": "8",
        "parity": "none",
        "stopbits": "1",
        "waitfor": "",
        "dtr": "none",
        "rts": "none",
        "cts": "none",
        "dsr": "none",
        "newline": "\\n",
        "bin": "false",
        "out": "char",
        "addchar": "",
        "responsetimeout": "10000"
    },
    {
        "id": "ecb43e63847ff54b",
        "type": "mongodb",
        "hostname": "127.0.0.1",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "meteodata",
        "name": ""
    }
]
