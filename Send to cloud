[
    {
        "id": "cffbbb50e33f7a68",
        "type": "subflow",
        "name": "pingCloud",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 100,
                "wires": [
                    {
                        "id": "0c9ed334e0a54299"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "1ede5b622f834e88",
        "type": "http request",
        "z": "cffbbb50e33f7a68",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": true,
        "x": 490,
        "y": 140,
        "wires": [
            [
                "f0d2108925835eb7"
            ]
        ]
    },
    {
        "id": "f0d2108925835eb7",
        "type": "switch",
        "z": "cffbbb50e33f7a68",
        "name": "validateStatusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nnull"
            },
            {
                "t": "eq",
                "v": "ECONNREFUSED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 670,
        "y": 140,
        "wires": [
            [
                "fc2899f39a7e806c"
            ],
            [
                "d0bac1b99cdade0f"
            ]
        ]
    },
    {
        "id": "fc2899f39a7e806c",
        "type": "change",
        "z": "cffbbb50e33f7a68",
        "name": "setOnline",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Online",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 100,
        "wires": [
            [
                "eb579c13d0a190b7"
            ]
        ]
    },
    {
        "id": "d0bac1b99cdade0f",
        "type": "change",
        "z": "cffbbb50e33f7a68",
        "name": "setOffline",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Offline",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 860,
        "y": 180,
        "wires": [
            [
                "eb579c13d0a190b7"
            ]
        ]
    },
    {
        "id": "e0766e1d08fff2e4",
        "type": "inject",
        "z": "cffbbb50e33f7a68",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 130,
        "y": 200,
        "wires": [
            [
                "0c9ed334e0a54299"
            ]
        ]
    },
    {
        "id": "eb579c13d0a190b7",
        "type": "ui_text",
        "z": "cffbbb50e33f7a68",
        "group": "b5647dd8ac47eae9",
        "order": 2,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Cloud:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 1030,
        "y": 140,
        "wires": []
    },
    {
        "id": "0c9ed334e0a54299",
        "type": "function",
        "z": "cffbbb50e33f7a68",
        "name": "configURL",
        "func": "const CLOUD_URL = env.get(\"CLOUD_URL\")\nconst path = \"\"\nmsg.url = CLOUD_URL + path\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 310,
        "y": 140,
        "wires": [
            [
                "1ede5b622f834e88"
            ]
        ]
    },
    {
        "id": "95a2c526f4ef6e01",
        "type": "subflow",
        "name": "pingGoogle",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 120,
                "wires": [
                    {
                        "id": "40cedfcf95cd5644"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "3cc5b17ddf5f6655",
        "type": "ui_text",
        "z": "95a2c526f4ef6e01",
        "group": "b5647dd8ac47eae9",
        "order": 1,
        "width": 0,
        "height": 0,
        "name": "",
        "label": "Connection:",
        "format": "{{msg.payload}}",
        "layout": "row-spread",
        "className": "",
        "x": 950,
        "y": 120,
        "wires": [],
        "info": "if(true){\n    return yes;\n}else{\n    return no;\n}"
    },
    {
        "id": "40cedfcf95cd5644",
        "type": "http request",
        "z": "95a2c526f4ef6e01",
        "name": "",
        "method": "GET",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "https://www.google.com/",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": true,
        "x": 290,
        "y": 120,
        "wires": [
            [
                "a834a833d50c6ede"
            ]
        ]
    },
    {
        "id": "a834a833d50c6ede",
        "type": "switch",
        "z": "95a2c526f4ef6e01",
        "name": "validateStatusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "200",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "ECONNREFUSED",
                "vt": "str"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 2,
        "x": 490,
        "y": 120,
        "wires": [
            [
                "b51fae7da387a559"
            ],
            [
                "67b0215008bb617e"
            ]
        ]
    },
    {
        "id": "b51fae7da387a559",
        "type": "change",
        "z": "95a2c526f4ef6e01",
        "name": "setOnline",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Online",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 80,
        "wires": [
            [
                "3cc5b17ddf5f6655"
            ]
        ]
    },
    {
        "id": "67b0215008bb617e",
        "type": "change",
        "z": "95a2c526f4ef6e01",
        "name": "setOffline",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "Offline",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 700,
        "y": 160,
        "wires": [
            [
                "3cc5b17ddf5f6655"
            ]
        ]
    },
    {
        "id": "0b8c37cfc495c128",
        "type": "inject",
        "z": "95a2c526f4ef6e01",
        "name": "",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 90,
        "y": 180,
        "wires": [
            [
                "40cedfcf95cd5644"
            ]
        ]
    },
    {
        "id": "b5647dd8ac47eae9",
        "type": "ui_group",
        "name": "Connection",
        "tab": "1649194ce587d352",
        "order": 1,
        "disp": true,
        "width": "6",
        "collapse": false,
        "className": ""
    },
    {
        "id": "1649194ce587d352",
        "type": "ui_tab",
        "name": "Home",
        "icon": "dashboard",
        "order": 1,
        "disabled": false,
        "hidden": false
    },
    {
        "id": "c6099cb141cc560e",
        "type": "subflow",
        "name": "authGateway",
        "info": "",
        "category": "",
        "in": [
            {
                "x": 120,
                "y": 40,
                "wires": [
                    {
                        "id": "86c0c907e0a4e0bb"
                    }
                ]
            }
        ],
        "out": [],
        "env": [],
        "meta": {},
        "color": "#DDAA99"
    },
    {
        "id": "0e23f55a502915ef",
        "type": "http request",
        "z": "c6099cb141cc560e",
        "name": "authGateway",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": true,
        "x": 510,
        "y": 300,
        "wires": [
            [
                "c1ac311303bda025"
            ]
        ]
    },
    {
        "id": "b226ff8c1814552f",
        "type": "inject",
        "z": "c6099cb141cc560e",
        "name": "injectOnStart",
        "props": [],
        "repeat": "",
        "crontab": "",
        "once": true,
        "onceDelay": 0.1,
        "topic": "",
        "x": 110,
        "y": 160,
        "wires": [
            [
                "86c0c907e0a4e0bb"
            ]
        ]
    },
    {
        "id": "a56a433d841409f0",
        "type": "json",
        "z": "c6099cb141cc560e",
        "name": "parseToJson",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 190,
        "y": 300,
        "wires": [
            [
                "c0bd80c4e6764fac"
            ]
        ]
    },
    {
        "id": "c1ac311303bda025",
        "type": "json",
        "z": "c6099cb141cc560e",
        "name": "parseFromJson",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 680,
        "y": 300,
        "wires": [
            [
                "b63964cced4fc426"
            ]
        ]
    },
    {
        "id": "b63964cced4fc426",
        "type": "change",
        "z": "c6099cb141cc560e",
        "name": "setAuthToken",
        "rules": [
            {
                "t": "set",
                "p": "token",
                "pt": "global",
                "to": "payload.token",
                "tot": "msg"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 880,
        "y": 300,
        "wires": [
            []
        ]
    },
    {
        "id": "af0768961aaebe81",
        "type": "json",
        "z": "c6099cb141cc560e",
        "name": "",
        "property": "payload",
        "action": "obj",
        "pretty": false,
        "x": 610,
        "y": 100,
        "wires": [
            [
                "13e25a5b311e885b"
            ]
        ]
    },
    {
        "id": "bd565e260b5ba234",
        "type": "file in",
        "z": "c6099cb141cc560e",
        "name": "Credentials.txt",
        "filename": "",
        "format": "utf8",
        "chunk": false,
        "sendError": false,
        "encoding": "utf8",
        "allProps": false,
        "x": 460,
        "y": 100,
        "wires": [
            [
                "af0768961aaebe81"
            ]
        ]
    },
    {
        "id": "13e25a5b311e885b",
        "type": "change",
        "z": "c6099cb141cc560e",
        "name": "setRequestHeadersAndBody",
        "rules": [
            {
                "t": "delete",
                "p": "headers",
                "pt": "msg"
            },
            {
                "t": "set",
                "p": "headers.content-type",
                "pt": "msg",
                "to": "application/json",
                "tot": "str"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 820,
        "y": 100,
        "wires": [
            [
                "a56a433d841409f0"
            ]
        ]
    },
    {
        "id": "86c0c907e0a4e0bb",
        "type": "function",
        "z": "c6099cb141cc560e",
        "name": "configFilePath",
        "func": "const DOCS_PATH = env.get(\"DOCS_PATH\")\nconst filename = \"Credentials.txt\"\nmsg.filename = DOCS_PATH + filename\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 280,
        "y": 100,
        "wires": [
            [
                "bd565e260b5ba234"
            ]
        ]
    },
    {
        "id": "c0bd80c4e6764fac",
        "type": "function",
        "z": "c6099cb141cc560e",
        "name": "configURL",
        "func": "const CLOUD_URL = env.get(\"CLOUD_URL\")\nconst path = \"auth/gateway/authorize\"\nmsg.url = CLOUD_URL + path\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 350,
        "y": 300,
        "wires": [
            [
                "0e23f55a502915ef"
            ]
        ]
    },
    {
        "id": "ef6140f8cf31fa28",
        "type": "tab",
        "label": "Send to cloud",
        "disabled": false,
        "info": "This flow is reponsible for sendind data to cloud application.\nHappy day scenario:\n1. Data are loaded in msg.payload variable.\n2. Id of every document is stored in documentIds flow variable.\n3. Request is send to cloud app using bearer token for authorization, which was obtained from global variable token.\n4. Based on status code http response is validated.\n5. Property sent is changed to true for every sent document base on id match.\n\nAlternative scenario - statusCode 401 - not authorized:\n1. subflow authGateway is triggered\n2. token is requested using credentials stored in Credentials.txt\n\nAlternative scenario - statusCode ECONNREFUSED :\n1. Subflow pingGoogle is triggered\n2. Get request is sent to http.google.com\n3. Status connection in dashboard is based on reponse\n1. Subflow pingCloud is triggered\n2. Get request is sent to https.iotbe.heroku.com\n3. Status cloud in dashboard is based on\n\nAlternative scenario - unspecified error :\n1. All other errors are caught by catch node\n2. Error is logged in sentToCloudErrorLog.txt\n\n\n",
        "env": []
    },
    {
        "id": "d28137a93d159b90",
        "type": "catch",
        "z": "ef6140f8cf31fa28",
        "name": "",
        "scope": null,
        "uncaught": false,
        "x": 100,
        "y": 540,
        "wires": [
            [
                "b2fe9bcea0387b04",
                "0ed1d5c6fefe555b"
            ]
        ]
    },
    {
        "id": "b2fe9bcea0387b04",
        "type": "debug",
        "z": "ef6140f8cf31fa28",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 410,
        "y": 540,
        "wires": []
    },
    {
        "id": "5064970467f89778",
        "type": "inject",
        "z": "ef6140f8cf31fa28",
        "name": "loadFromCollection",
        "props": [
            {
                "p": "payload"
            },
            {
                "p": "projection",
                "v": "{\"temperature\":1,\"humidity\":1,\"timestamp\":1}",
                "vt": "json"
            }
        ],
        "repeat": "${INJECT_INTERVAL}",
        "crontab": "",
        "once": false,
        "onceDelay": 0.1,
        "topic": "",
        "payload": "{\"sent\":false}",
        "payloadType": "json",
        "x": 120,
        "y": 120,
        "wires": [
            [
                "eb5af10b0feef886"
            ]
        ]
    },
    {
        "id": "3077bedb7ea861e0",
        "type": "mongodb in",
        "z": "ef6140f8cf31fa28",
        "mongodb": "ecb43e63847ff54b",
        "name": "",
        "collection": "WeatherData",
        "operation": "find",
        "x": 570,
        "y": 120,
        "wires": [
            [
                "f0295efa3c82020c"
            ]
        ]
    },
    {
        "id": "a1afeb34c8fad9f2",
        "type": "json",
        "z": "ef6140f8cf31fa28",
        "name": "parseToJson",
        "property": "payload",
        "action": "",
        "pretty": false,
        "x": 110,
        "y": 200,
        "wires": [
            [
                "a517652791171f52"
            ]
        ]
    },
    {
        "id": "8956317983e3d7d5",
        "type": "http request",
        "z": "ef6140f8cf31fa28",
        "name": "postDataToCloud",
        "method": "POST",
        "ret": "txt",
        "paytoqs": "ignore",
        "url": "",
        "tls": "",
        "persist": false,
        "proxy": "",
        "authType": "",
        "senderr": false,
        "x": 490,
        "y": 200,
        "wires": [
            [
                "2fb8eba0176a6a31",
                "26cc133efed7a348"
            ]
        ]
    },
    {
        "id": "0b67c818509c1aa6",
        "type": "function",
        "z": "ef6140f8cf31fa28",
        "name": "setSentTrue",
        "func": "const documentIds = flow.get(\"documentIds\")\nmsg.query = {\"_id\": {$in: documentIds }};\nmsg.payload = {\"$set\": {\"sent\": true}};\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 510,
        "y": 440,
        "wires": [
            [
                "a83c83258bbad90d"
            ]
        ]
    },
    {
        "id": "2fb8eba0176a6a31",
        "type": "switch",
        "z": "ef6140f8cf31fa28",
        "name": "validateStatusCode",
        "property": "statusCode",
        "propertyType": "msg",
        "rules": [
            {
                "t": "eq",
                "v": "401",
                "vt": "num"
            },
            {
                "t": "eq",
                "v": "ECONNREFUSED",
                "vt": "str"
            },
            {
                "t": "btwn",
                "v": "200",
                "vt": "num",
                "v2": "299",
                "v2t": "num"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 3,
        "x": 170,
        "y": 360,
        "wires": [
            [
                "40c682d24e7caa93"
            ],
            [
                "b3022783e165f3ec",
                "d3510ba9aad23049"
            ],
            [
                "0b67c818509c1aa6"
            ]
        ]
    },
    {
        "id": "a83c83258bbad90d",
        "type": "mongodb out",
        "z": "ef6140f8cf31fa28",
        "mongodb": "ecb43e63847ff54b",
        "name": "",
        "collection": "WeatherData",
        "payonly": false,
        "upsert": false,
        "multi": true,
        "operation": "update",
        "x": 750,
        "y": 440,
        "wires": []
    },
    {
        "id": "a80c07ef6e112c3c",
        "type": "file",
        "z": "ef6140f8cf31fa28",
        "name": "sendToCloudErrorLog.txt",
        "filename": "",
        "appendNewline": true,
        "createDir": true,
        "overwriteFile": "false",
        "encoding": "utf8",
        "x": 750,
        "y": 620,
        "wires": [
            []
        ]
    },
    {
        "id": "e76f173739eab29b",
        "type": "function",
        "z": "ef6140f8cf31fa28",
        "name": "setRequestHeadersAndBody",
        "func": "const token = global.get(\"token\")\nmsg.headers = {\n    Authorization: \"Bearer \"+ token,\n    [\"content-type\"]: \"application/json\"\n}\nmsg.payload = {\n    data: msg.payload\n}\n\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1220,
        "y": 120,
        "wires": [
            [
                "a1afeb34c8fad9f2"
            ]
        ]
    },
    {
        "id": "40c682d24e7caa93",
        "type": "subflow:c6099cb141cc560e",
        "z": "ef6140f8cf31fa28",
        "name": "",
        "x": 510,
        "y": 280,
        "wires": []
    },
    {
        "id": "0ed1d5c6fefe555b",
        "type": "change",
        "z": "ef6140f8cf31fa28",
        "name": "setErrorLog",
        "rules": [
            {
                "t": "set",
                "p": "payload",
                "pt": "msg",
                "to": "error",
                "tot": "msg"
            },
            {
                "t": "set",
                "p": "payload.timestamp",
                "pt": "msg",
                "to": "",
                "tot": "date"
            }
        ],
        "action": "",
        "property": "",
        "from": "",
        "to": "",
        "reg": false,
        "x": 350,
        "y": 620,
        "wires": [
            [
                "dc4a7a4844664699"
            ]
        ]
    },
    {
        "id": "b3022783e165f3ec",
        "type": "subflow:95a2c526f4ef6e01",
        "z": "ef6140f8cf31fa28",
        "name": "",
        "x": 510,
        "y": 340,
        "wires": []
    },
    {
        "id": "d3510ba9aad23049",
        "type": "subflow:cffbbb50e33f7a68",
        "z": "ef6140f8cf31fa28",
        "name": "",
        "x": 500,
        "y": 380,
        "wires": []
    },
    {
        "id": "bcf4d0d4c382af28",
        "type": "function",
        "z": "ef6140f8cf31fa28",
        "name": "storeDocsIds",
        "func": "let documentIds = []\nconst data = msg.payload.map(({_id, ...rest})=>{\n   documentIds.push(_id)\n    return rest\n})\nflow.set(\"documentIds\", documentIds)\nmsg.payload = data\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 1010,
        "y": 120,
        "wires": [
            [
                "e76f173739eab29b"
            ]
        ]
    },
    {
        "id": "f0295efa3c82020c",
        "type": "switch",
        "z": "ef6140f8cf31fa28",
        "name": "validateNotEmpty",
        "property": "payload",
        "propertyType": "msg",
        "rules": [
            {
                "t": "nempty"
            }
        ],
        "checkall": "true",
        "repair": false,
        "outputs": 1,
        "x": 830,
        "y": 120,
        "wires": [
            [
                "bcf4d0d4c382af28"
            ]
        ]
    },
    {
        "id": "eb5af10b0feef886",
        "type": "delay",
        "z": "ef6140f8cf31fa28",
        "name": "",
        "pauseType": "delay",
        "timeout": "1",
        "timeoutUnits": "seconds",
        "rate": "1",
        "nbRateUnits": "1",
        "rateUnits": "second",
        "randomFirst": "1",
        "randomLast": "5",
        "randomUnits": "seconds",
        "drop": false,
        "allowrate": false,
        "outputs": 1,
        "x": 300,
        "y": 120,
        "wires": [
            [
                "3077bedb7ea861e0"
            ]
        ]
    },
    {
        "id": "dc4a7a4844664699",
        "type": "function",
        "z": "ef6140f8cf31fa28",
        "name": "configFilePath",
        "func": "const DOCS_PATH = env.get(\"DOCS_PATH\")\nconst filename = \"SendToCloudErrorLog.txt\"\nmsg.filename = DOCS_PATH + filename\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 540,
        "y": 620,
        "wires": [
            [
                "a80c07ef6e112c3c"
            ]
        ]
    },
    {
        "id": "a517652791171f52",
        "type": "function",
        "z": "ef6140f8cf31fa28",
        "name": "configURL",
        "func": "const CLOUD_URL = env.get(\"CLOUD_URL\")\nconst path = \"weather-data\"\nmsg.url = CLOUD_URL + path\nreturn msg;",
        "outputs": 1,
        "noerr": 0,
        "initialize": "",
        "finalize": "",
        "libs": [],
        "x": 270,
        "y": 200,
        "wires": [
            [
                "8956317983e3d7d5"
            ]
        ]
    },
    {
        "id": "26cc133efed7a348",
        "type": "debug",
        "z": "ef6140f8cf31fa28",
        "name": "",
        "active": true,
        "tosidebar": true,
        "console": false,
        "tostatus": false,
        "complete": "true",
        "targetType": "full",
        "statusVal": "",
        "statusType": "auto",
        "x": 710,
        "y": 200,
        "wires": []
    },
    {
        "id": "ecb43e63847ff54b",
        "type": "mongodb",
        "hostname": "127.0.0.1",
        "topology": "direct",
        "connectOptions": "",
        "port": "27017",
        "db": "meteodata",
        "name": ""
    }
]
